template <>
struct fmt::formatter<{{ namespaces | join('::') }}::{{ name }}> {
  template <typename Context>
  constexpr auto parse(Context &context) {
    return std::begin(context);
  }
  template <typename Context>
  auto format(
      const {{ namespaces | join('::') }}::{{ name }}& value,
      Context& context) const {
    using namespace std::literals;
    return fmt::format_to(
        context.out(),
{%- raw %}
        R"({{)"
{%- endraw %}
{%- for variable in variables %}
        R"({{ variable.name }}={{ variable.format_string }}{{ ', ' if not loop.last }})"
{%- endfor %}
{%- raw %}
        R"(}})"sv
{%- endraw %}
{%- for variable in variables %}
        , {{ variable.format_value }}
{%- endfor %}
    );
  }
};
